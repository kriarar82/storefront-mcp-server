apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  labels:
    app: mcp-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
    spec:
      containers:
      - name: mcp-server
        image: mcp-server:latest
        ports:
        - containerPort: 8080
        env:
        - name: PRODUCT_SERVICE_URL
          value: "http://java-microservice:8080"
        - name: PRODUCT_SERVICE_TIMEOUT
          value: "30"
        - name: MCP_SERVER_NAME
          value: "product-info-server"
        - name: MCP_SERVER_VERSION
          value: "1.0.0"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.path.insert(0, '/app/src'); from product_mcp.server import ProductServiceClient; import asyncio; asyncio.run(ProductServiceClient('http://java-microservice:8080').close())"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.path.insert(0, '/app/src'); from product_mcp.server import ProductServiceClient; import asyncio; asyncio.run(ProductServiceClient('http://java-microservice:8080').close())"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-server-service
spec:
  selector:
    app: mcp-server
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP



